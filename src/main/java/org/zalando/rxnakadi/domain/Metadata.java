package org.zalando.rxnakadi.domain;

import java.time.Instant;

import java.util.Set;
import java.util.UUID;

import javax.annotation.Nullable;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Null;

import org.immutables.value.Value;

import org.zalando.rxnakadi.NakadiTopic;
import org.zalando.rxnakadi.TopicDescriptor;

/**
 * Metadata of a Nakadi event.
 *
 * <p>Contains commons fields for both Business and DataChange events. Most are enriched by Nakadi upon reception, but
 * they in general MIGHT be set by the client.</p>
 *
 * @see  <a href="https://github.com/zalando/nakadi/blob/R2017_01_03/api/nakadi-event-bus-api.yaml#L1162">Nakadi Event
 *       Bus API Definition: #/definitions/EventMetadata</a>
 */
@Value.Immutable
public interface Metadata {

    static Metadata create() {
        return create(Instant.now());
    }

    static Metadata create(final Instant occurredAt) {
        return ImmutableMetadata.builder().eid(UUID.randomUUID()).occurredAt(occurredAt).build();
    }

    /**
     * Identifier of the event.
     *
     * <p>Clients MUST generate this value and it SHOULD be guaranteed to be unique from the perspective of the
     * producer. Consumers MIGHT use this value to assert uniqueness of reception of the event.</p>
     *
     * @return  the identifier of the event
     */
    @NotNull
    UUID getEid();

    /**
     * The {@link EventType} of the event. This is enriched by Nakadi on reception of the event based on the
     * {@link NakadiTopic topic} on which it has been published.
     *
     * <p>If provided when {@link NakadiTopic#publish(java.util.List) publishing} an event, the type MUST match the
     * {@link TopicDescriptor#getEventType() topic's event type}. Otherwise, the event will be rejected.</p>
     *
     * @return  the event type of the event
     */
    @Nullable
    @NotNull(groups = Inbound.class)
    EventType getEventType();

    /**
     * Timestamp of creation of the event generated by the producer.
     *
     * @return  the creation timestamp
     */
    @NotNull
    Instant getOccurredAt();

    /**
     * Timestamp of the reception of the event by Nakadi.
     *
     * <p>This is enriched upon reception of the event.</p>
     *
     * <p>f provided when {@link NakadiTopic#publish(java.util.List) publishing} an event, the event will be
     * rejected.</p>
     *
     * @return
     */
    @Nullable
    @Null(groups = Outbound.class)
    @NotNull(groups = Inbound.class)
    Instant getReceivedAt();

    /**
     * Version of the schema used for validating this event.
     *
     * <p>This is enriched upon reception of the event.</p>
     *
     * @return  the schema version against which the event has been validated
     */
    @Nullable
    @Null(groups = Outbound.class)
    @NotNull(groups = Inbound.class)
    String getVersion();

    /**
     * Event identifiers of the Event that caused the generation of this Event.
     *
     * <p>Set by the producer.</p>
     */
    @Nullable
    Set<UUID> parentEids();

    /**
     * The flow-id of the producer of this event.
     *
     * <p>As this is usually a HTTP header, this is enriched from the header into the metadata by Nakadi to avoid
     * clients having to explicitly copy this.</p>
     *
     * @return  the flow-id associated with the event
     */
    @Nullable
    String getFlowId();

    /**
     * Indicates the partition assigned to the Event.
     *
     * <p>Required to be set by the client if partition strategy of the event type is user defined.</p>
     *
     * @return  the event's partition
     */
    @Nullable
    String getPartition();
}
